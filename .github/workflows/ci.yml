name: CI

on:
  push:
    branches: [ main, v2-refactor ]
  pull_request:
    branches: [ main, v2-refactor ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Lint with flake8
      run: |
        # 停止构建如果有 Python 语法错误或未定义名称
        flake8 mail_mcp/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # 将其他错误作为警告处理
        flake8 mail_mcp/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short --maxfail=5
      continue-on-error: true
    
    - name: Check package can be imported
      run: |
        python -c "import mail_mcp; print(f'Mail MCP version: {mail_mcp.__version__}')"

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install black isort
    
    - name: Check code formatting with black
      run: |
        black --check --diff mail_mcp/
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff mail_mcp/
      continue-on-error: true

  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import mail_mcp; print(f'Installed version: {mail_mcp.__version__}')"