# 邮件MCP服务产品需求文档 (PRD)

## 1. 项目概述

### 1.1 项目目标
开发一个最小化的邮件MCP (Model Context Protocol) 服务，支持基本的IMAP和SMTP协议功能，为Claude等AI助手提供简单的邮件收发能力。

### 1.2 核心价值
- 为AI助手提供基础的邮件读取和发送能力
- 支持主流邮件服务商
- 简单易用的API接口

### 1.3 目标用户
- 需要AI助手处理邮件的开发者
- 自动化邮件处理场景

## 2. 功能需求

### 2.1 IMAP协议支持 (邮件接收)

#### 2.1.1 基础连接功能
- **服务器连接**: 支持IMAP服务器连接配置
- **身份认证**: 支持用户名/密码认证
- **SSL/TLS**: 支持安全连接

#### 2.1.2 邮件读取功能
- **邮件列表**: 获取收件箱邮件列表
- **邮件详情**: 获取单个邮件的完整内容
- **邮件搜索**: 基础搜索功能
- **邮件标记**: 标记已读/未读状态

#### 2.1.3 邮件操作
- **删除邮件**: 删除邮件

### 2.2 SMTP协议支持 (邮件发送)

#### 2.2.1 基础发送功能
- **服务器连接**: 支持SMTP服务器连接配置
- **身份认证**: 支持用户名/密码认证
- **SSL/TLS**: 支持安全连接
- **邮件发送**: 发送文本邮件

#### 2.2.2 邮件格式支持
- **纯文本邮件**: 基本文本邮件
- **HTML邮件**: 支持HTML格式的邮件
- **附件支持**: 支持添加附件

### 2.3 配置管理

#### 2.3.1 账户配置
- **单账户支持**: 支持单个邮件账户
- **账户配置**: 配置IMAP/SMTP服务器参数
- **环境变量**: 通过环境变量配置敏感信息

## 3. 技术架构

### 3.1 系统架构
```
邮件MCP服务
├── MCP协议层
│   ├── 请求处理
│   └── 错误处理
├── 业务逻辑层
│   ├── IMAP服务
│   └── SMTP服务
└── 基础设施层
    ├── 网络连接
    └── 配置管理
```

### 3.2 技术栈选择
- **运行时**: Python 3.8+
- **MCP框架**: fastmcp (快速MCP框架)
- **IMAP库**: imaplib (Python内置)
- **SMTP库**: smtplib (Python内置)
- **邮件处理**: email标准库
- **配置**: 环境变量

### 3.3 简化数据模型

#### 3.3.1 邮件消息
```python
from dataclasses import dataclass
from typing import List, Optional

@dataclass
class EmailAttachment:
    filename: str
    content_type: str
    size: int

@dataclass
class EmailMessage:
    id: str
    subject: str
    from_address: str
    to_addresses: List[str]
    date: str
    body_text: str
    body_html: Optional[str]
    attachments: List[EmailAttachment]
    is_read: bool
```

## 4. API接口设计

### 4.1 MCP工具定义

#### 4.1.1 IMAP工具
- `list_messages`: 获取邮件列表
- `get_message`: 获取单个邮件详情
- `search_messages`: 搜索邮件
- `mark_as_read`: 标记邮件为已读
- `delete_message`: 删除邮件

#### 4.1.2 SMTP工具
- `send_email`: 发送邮件
- `send_email_with_attachments`: 发送带附件的邮件

### 4.2 配置参数
- `IMAP_HOST`: IMAP服务器地址
- `IMAP_PORT`: IMAP服务器端口
- `IMAP_USER`: IMAP用户名
- `IMAP_PASSWORD`: IMAP密码
- `SMTP_HOST`: SMTP服务器地址
- `SMTP_PORT`: SMTP服务器端口
- `SMTP_USER`: SMTP用户名
- `SMTP_PASSWORD`: SMTP密码

## 5. 安全要求

### 5.1 数据安全
- **加密传输**: 使用SSL/TLS加密
- **环境变量**: 敏感信息通过环境变量配置
- **最小权限**: 只提供必要的邮件操作权限

### 5.2 安全最佳实践
- **输入验证**: 基础输入验证
- **错误处理**: 安全的错误信息处理

## 6. 性能要求

### 6.1 响应时间
- **邮件列表**: < 3秒
- **邮件详情**: < 2秒
- **邮件发送**: < 5秒

### 6.2 简单性原则
- 单账户支持
- 基础功能优先
- 易于部署和配置

## 7. 开发计划

### 7.1 第一阶段：基础框架 (3天)
- Python项目初始化
- fastmcp框架集成
- 环境配置
- 基础服务结构

### 7.2 第二阶段：IMAP功能 (3天)
- IMAP连接和认证
- 邮件列表获取
- 邮件详情读取
- 基础搜索功能

### 7.3 第三阶段：SMTP功能 (3天)
- SMTP连接和认证
- 邮件发送功能
- 附件支持

### 7.4 第四阶段：完善和测试 (2天)
- 错误处理优化
- 基础测试
- 文档编写

## 8. 成功标准

### 8.1 功能完整性
- 能够成功连接邮件服务器
- 能够读取和发送邮件
- 支持基础搜索功能

### 8.2 易用性
- 配置简单
- API接口清晰
- 错误处理友好

### 8.3 稳定性
- 基础功能稳定
- 能够处理常见错误情况