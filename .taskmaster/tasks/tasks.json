{
  "master": {
    "tasks": [
      {
        "id": 11,
        "title": "设计搜索功能数据模型",
        "description": "扩展现有的数据模型以支持邮件搜索功能，包括搜索请求参数和搜索结果响应格式",
        "details": "在 mail_mcp/models.py 中创建新的数据类：\n1. SearchRequest 数据类：包含 query (搜索关键词), date_from (开始日期), date_to (结束日期), page (页码，默认1), page_size (每页大小，默认20) 等字段\n2. SearchResult 数据类：包含 total_count (总结果数), current_page (当前页码), total_pages (总页数), emails (EmailResult列表) 等字段\n3. EmailResult 数据类：包含 uid (邮件唯一标识符), subject (邮件主题), sender (发件人), recipient (收件人), date (邮件日期), folder (所在文件夹), summary (邮件内容摘要，约200字符), has_attachments (是否有附件) 等字段\n4. 确保所有数据类都有完整的验证逻辑、to_dict()和from_dict()方法以支持JSON序列化",
        "testStrategy": "编写单元测试验证：\n1. 数据模型的初始化和字段验证\n2. 边界值测试（如page_size的最大值限制）\n3. JSON序列化和反序列化的正确性\n4. 数据类型转换的准确性",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "实现IMAP搜索核心逻辑",
        "description": "在IMAPService中实现邮件搜索的核心逻辑，支持多文件夹搜索和模糊匹配",
        "details": "在 mail_mcp/imap_service.py 中实现新方法：\n1. async def search_emails(self, request: SearchRequest) -> SearchResult\n2. 实现搜索逻辑：\n   - 同时搜索INBOX和Sent文件夹（排除垃圾邮件文件夹）\n   - 使用IMAP SEARCH命令构建搜索查询：OR (SUBJECT \"keyword\") (TEXT \"keyword\")\n   - 支持日期范围筛选：SINCE date_from BEFORE date_to\n   - 实现模糊搜索：将关键词拆分并分别搜索\n3. 实现分页逻辑：\n   - 获取所有匹配的邮件ID列表\n   - 按日期降序排序（最新邮件在前）\n   - 根据page和page_size计算偏移量和限制\n   - 只获取当前页需要的邮件详细信息\n4. 生成邮件摘要：截取正文前200个字符，去除HTML标签\n5. 利用现有的connection_pool和email_cache优化性能",
        "testStrategy": "编写集成测试验证：\n1. 多文件夹搜索的正确性\n2. 关键词匹配的准确性（主题、正文）\n3. 日期范围筛选功能\n4. 分页功能的正确性\n5. 排序功能（按日期降序）\n6. 摘要生成的准确性",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "创建搜索MCP工具",
        "description": "在main.py中注册新的search MCP工具，集成到现有架构",
        "details": "在 mail_mcp/main.py 的 register_tools() 方法中添加新工具：\n1. 使用 @self.mcp.tool() 装饰器注册 search 工具\n2. 工具签名：async def search(query: str, date_from: Optional[str] = None, date_to: Optional[str] = None, page: Optional[int] = 1, page_size: Optional[int] = 20) -> str\n3. 实现逻辑：\n   - 参数验证（query不能为空）\n   - 日期格式验证（YYYY-MM-DD）\n   - 创建SearchRequest对象\n   - 调用imap_service.search_emails()\n   - 格式化返回结果为JSON\n4. 错误处理：\n   - 使用现有的错误处理机制（MailMCPError, create_error_response）\n   - 记录搜索日志（使用logger）\n   - 处理IMAP服务未初始化的情况\n5. 遵循现有工具的代码风格和模式",
        "testStrategy": "编写MCP工具测试：\n1. 工具注册和可用性测试\n2. 参数验证测试（空查询、无效日期格式）\n3. 正常搜索流程测试\n4. 错误处理测试（服务未初始化、网络错误）\n5. 返回格式验证（JSON格式正确性）",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "编写搜索功能单元测试",
        "description": "为搜索功能编写全面的单元测试，确保功能稳定性",
        "details": "创建 tests/test_search_tool.py 文件，编写测试：\n1. 模型测试（test_search_models.py）：\n   - SearchRequest 验证测试\n   - SearchResult 序列化测试\n   - EmailResult 数据完整性测试\n2. IMAP搜索测试（test_imap_search.py）：\n   - Mock IMAP连接和响应\n   - 测试搜索查询构建\n   - 测试多文件夹搜索\n   - 测试分页逻辑\n3. MCP工具测试（test_search_tool.py）：\n   - 测试工具注册\n   - 测试参数验证\n   - 测试正常搜索流程\n   - 测试错误处理\n4. 性能测试（test_search_performance.py）：\n   - 测试大量结果处理\n   - 测试并发搜索\n   - 测试缓存效果\n5. 集成测试：\n   - 端到端搜索测试\n   - 与其他工具的兼容性测试",
        "testStrategy": "测试覆盖率要求：\n1. 代码覆盖率 > 80%\n2. 所有关键路径必须覆盖\n3. 边界条件测试完整\n4. 异常处理测试充分\n5. 性能基准测试通过",
        "priority": "high",
        "dependencies": [
          14
        ],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "编写搜索功能文档",
        "description": "创建搜索功能的使用文档和API文档",
        "details": "创建文档：\n1. 更新 README.md：\n   - 添加搜索功能介绍\n   - 添加搜索工具使用示例\n   - 更新功能特性列表\n2. 创建 docs/search-api.md：\n   - 详细的API参数说明\n   - 请求和响应示例\n   - 错误码说明\n3. 代码注释（中文文档，英文代码注释）：\n   - 为所有新增函数添加docstring\n   - 添加类型注解\n   - 添加使用示例\n4. 创建使用指南：\n   - 基础搜索示例\n   - 高级搜索技巧\n   - 性能优化建议\n5. 更新CHANGELOG.md：\n   - 记录新增搜索功能\n   - 版本号更新说明",
        "testStrategy": "文档验证：\n1. 代码示例可执行性验证\n2. API文档准确性验证\n3. 中英文文档一致性检查\n4. 文档完整性检查\n5. 用户反馈收集",
        "priority": "medium",
        "dependencies": [
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "部署和监控配置",
        "description": "完成搜索功能的部署配置和监控设置",
        "details": "部署和监控设置：\n1. 更新版本号：\n   - 更新 pyproject.toml 版本到 2.2.0\n   - 更新变更日志\n2. 性能监控配置：\n   - 在 performance_monitor 中添加搜索相关指标\n   - 监控搜索响应时间\n   - 监控搜索成功率\n   - 监控缓存命中率\n3. 日志配置：\n   - 添加搜索操作日志\n   - 记录搜索关键词（脱敏处理）\n   - 记录搜索耗时和结果数量\n4. 错误告警：\n   - 设置搜索失败告警阈值\n   - 配置性能下降告警\n5. 部署验证：\n   - 运行所有测试套件\n   - 验证向后兼容性\n   - 性能基准测试\n   - 生产环境验证清单",
        "testStrategy": "部署验证：\n1. 回归测试（确保现有功能正常）\n2. 性能测试（确保不影响现有性能）\n3. 兼容性测试\n4. 监控指标验证\n5. 生产环境冒烟测试",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-21T15:44:14.269Z",
      "updated": "2025-09-22T13:28:46.434Z",
      "description": "Tasks for master context"
    }
  }
}